<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #26. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- ==== #27. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="star">

	<insert id="createTeam" parameterType="HashMap">
		  insert into ins_team (team_idx, admin_userid, team_name)
		  values(seq_team.nextval, #{userid}, #{team_name})
	</insert>
 
 
    <select id="myTeamInfo" parameterType="HashMap" resultType="com.spring.finalins.model.TeamVO">
          select A.team_idx, A.admin_userid, A.team_name, A.team_delete_status, A.team_visibility_status, A.org_filename, A.server_filename, A.file_size
		  from ins_team A join (
		                        select max(team_idx) as team_idx
		                        from ins_team
		                        where team_name = #{team_name} and admin_userid = #{userid}) B 
		  on A.team_idx = B.team_idx 
    </select>
    
    <update id="editTeam" parameterType="HashMap">
          update ins_team set team_name = #{team_name}
          where team_idx = #{team_idx}
    </update>
     
    <select id="getInfoTeam" parameterType="String" resultType="com.spring.finalins.model.TeamVO">
   		  select team_idx, admin_userid, team_name, team_delete_status, team_visibility_status, org_filename, server_filename, file_size
		  from ins_team
		  where team_idx = #{team_idx}
    </select>
    
    <insert id="insertTeamMember" parameterType="HashMap"> 
		 insert into ins_team_member (fk_team_idx, team_userid, team_member_admin_status)
		 values( #{team_idx}, #{admin_userid}, 2)
    </insert>
    
    <select id="teamMemberInfo" parameterType="HashMap" resultType="com.spring.finalins.model.TeamMemberVO">
		 select fk_team_idx, team_userid, team_member_admin_status
		 from ins_team_member
		 where fk_team_idx = #{team_idx} and team_userid = #{login_userid}
    </select>  
    
    <select id="checkMemberExist" parameterType="HashMap" resultType="Integer"> 
		select count(*) as CNT
		from ins_team A left join ins_team_member B
		on A.team_idx = B.fk_team_idx
		where B.team_userid =  #{login_userid} and A.team_idx = #{team_idx} 
    </select>
    
    <update id="updateViewStatus" parameterType="HashMap"> 
		update ins_team set team_visibility_status = #{team_visibility_status}
		where team_idx = #{team_idx}
    </update>
    
    <select id="countMember" parameterType="HashMap" resultType="Integer">
        select count(*) as CNT
		from ins_team_member
		where fk_team_idx = #{team_idx} and team_userid != #{login_userid} and team_member_admin_status != 3 and team_member_admin_status != 4
    </select>
    
    <select id="getTeamMembers" parameterType="HashMap" resultType="com.spring.finalins.model.MemberVO">
        select B.userid, B.pwd, B.name, B.nickname, B.email, B.tel1, B.tel2, B.tel3, B.leave_status, B.job, B.birthday, B.org_filename, B.ins_personal_alarm, B.server_filename, B.file_size
		from ins_team_member A join ins_member B
		on A.team_userid = B.userid
		where A.fk_team_idx = #{team_idx} and A.team_member_admin_status != 3 and A.team_member_admin_status != 4 and B.leave_status != 1
    </select>
    
    <resultMap type="HashMap"  id="getListMemberMap">
        <result property="userid" 				    column="userid" 			      javaType="String" />
 		<result property="pwd" 			            column="pwd" 			          javaType="String" />
 		<result property="name" 		            column="name" 			          javaType="String" />
 		<result property="nickname" 			    column="nickname" 		          javaType="String" />
 		<result property="email" 			        column="email" 		         	  javaType="String" />
 		<result property="tel1" 	                column="tel1" 	                  javaType="String" />
 		<result property="tel2" 				    column="tel2" 			          javaType="String" />
 		<result property="tel3" 			        column="tel3" 			          javaType="String" />
 		<result property="leave_status" 		    column="leave_status" 			  javaType="String" />
 		<result property="job" 			            column="job" 		              javaType="String" />
 		<result property="birthday" 			    column="birthday" 			      javaType="String" />
 		<result property="org_filename" 	            column="org_filename" 	          javaType="String" />
 		<result property="ins_personal_alarm" 	    column="ins_personal_alarm"       javaType="String" />
 		<result property="team_member_admin_status" column="team_member_admin_status" javaType="String" /> 
    </resultMap>
    
    <select id="getTeamMembersMap" parameterType="HashMap" resultMap="getListMemberMap">
        select userid, pwd, name, nickname, email, tel1, tel2, tel3, leave_status, job, birthday, org_filename, ins_personal_alarm, team_member_admin_status
	    from 
	       (
	        select rownum as RNO, userid, pwd, name, nickname, email, tel1, tel2, tel3, leave_status, job, birthday, org_filename, ins_personal_alarm, team_member_admin_status
	        from
	           (
	             select B.userid, B.pwd, B.name, B.nickname, B.email, B.tel1, B.tel2, B.tel3, B.leave_status, B.job, B.birthday, B.org_filename, B.ins_personal_alarm, A.team_member_admin_status
	                    from ins_team_member A join ins_member B
	                    on A.team_userid = B.userid
	                    where A.fk_team_idx = #{team_idx} and A.team_member_admin_status != 3 and A.team_member_admin_status != 4 and B.leave_status != 1
	                    order by A.team_member_admin_status desc
	           )V
	        )T
	      where rno between #{startRno} and #{endRno}
    </select>
    
    <select id="getTeamListJSON" parameterType="String" resultType="com.spring.finalins.model.TeamVO"> 
		select  A.team_idx, A.admin_userid, A.team_name, A.team_delete_status, A.team_visibility_status, A.org_filename, A.server_filename, A.file_size
		from ins_team A join ins_team_member B
		on A.team_idx = B.fk_team_idx
		where B.team_userid = #{userid} and A.team_delete_status != 0  
		order by A.team_idx
    </select>
    
    <select id="getcountTeam" parameterType="String" resultType="Integer"> 
		select count(*)
		from ins_team A join ins_team_member B
		on A.team_idx = B.fk_team_idx
		where B.team_userid = #{userid}  
    </select>
     
    <select id="getCountresult" parameterType="String" resultType="Integer">
        select count(*)
		from ins_member
		where (lower(nickname) like '%' || #{searchWord} || '%'  or lower(email) like '%' || #{searchWord} || '%') and leave_status = 0 
     
    </select>
     
     
     
    <resultMap type="HashMap"  id="searchMemberMap"> 
 		<result property="nickname" 			    column="nickname" 		          javaType="String" />
 		<result property="email" 			        column="email" 		         	  javaType="String" />  
 		<result property="org_filename" 	            column="org_filename" 	          javaType="String" /> 
 		<result property="userid" 	         	    column="userid" 	              javaType="String" /> 
    </resultMap> 
    <select id="searchMember" parameterType="HashMap" resultMap="searchMemberMap">  
       select rownum as RNO, userid, nickname, email, org_filename
		from ins_member
		where (lower(nickname) like '%' || #{searchWord} || '%'  or lower(email) like '%' || #{searchWord}  || '%') and leave_status = 0 and userid !=  #{login_userid}
        order by 2 
    </select>
    
    
    <select id="checkAdmin" parameterType="String" resultType="Integer"> 
		select count(*) as CNT
		from ins_team_member
		where fk_team_idx = #{team_idx} and team_member_admin_status = 1
    </select>
    
    
    <update id="chgTo2ndAdmin" parameterType="HashMap"> 
		update ins_team_member set team_member_admin_status = 1
		where team_userid = #{userid} and fk_team_idx = #{team_idx}
    </update>
    
    <update id="chgToAdmin" parameterType="HashMap">
        update ins_team set admin_userid = #{userid}
		where team_idx = #{team_idx}
    </update> 
    
    <update id="chgToNormal" parameterType="HashMap">
       update ins_team_member set team_member_admin_status = 0
       where team_userid = #{userid} and fk_team_idx = #{team_idx}
    </update>
    
    <update id="updateAdminUser" parameterType="HashMap">
       update ins_team_member set team_member_admin_status = 2
       where team_userid = #{userid} and fk_team_idx = #{team_idx}
    </update>
    
    <update id="updateOldAdmin" parameterType="HashMap">
       update ins_team_member set team_member_admin_status = 0
       where team_userid = #{login_userid} and fk_team_idx = #{team_idx}
    </update>
    
    <insert id="inviteMember" parameterType="HashMap">
       insert into ins_team_member(fk_team_idx, team_userid, team_member_admin_status)
	   values( #{team_idx} , #{inviteUser}, 3)  
    </insert>
    
    <resultMap type="HashMap"  id="joinMemberMap"> 
    	<result property="name" 			        column="name" 		              javaType="String" />
 		<result property="nickname" 			    column="nickname" 		          javaType="String" />
 		<result property="email" 			        column="email" 		         	  javaType="String" />  
 		<result property="org_filename" 	            column="org_filename" 	          javaType="String" /> 
 		<result property="userid" 	         	    column="userid" 	              javaType="String" /> 
    </resultMap> 
    <select id="joinMemberList" parameterType="HashMap" resultMap="joinMemberMap"> 
		  select userid, name, nickname, email, org_filename
		  from
		   (
		     select rownum as RNO, userid, name, nickname, email, org_filename
		     from
		      (
		        select userid, name, nickname, email, org_filename
		        from ins_team_member A join ins_member B
		        on A.team_userid = B.userid
		        where A.fk_team_idx = #{team_idx} and A.team_member_admin_status = 4 and B.leave_status = 0 
		        order by 1      
		       )V
		   )T
		   where T.RNO between #{startRno} and #{endRno}
    </select>
    
    <update id="acceptMember" parameterType="HashMap"> 
		update ins_team_member set team_membeR_admin_status = 0
		where fk_team_idx = #{team_idx} and team_userid = #{userid} 
    </update>
    
    <delete id="declineMember" parameterType="HashMap">
        delete from ins_team_member  
        where fk_team_idx = #{team_idx} and team_userid = #{userid}
    </delete>
    
    <update id="updateTeamPic" parameterType="com.spring.finalins.model.TeamVO"> 
		update ins_team set org_filename = #{org_filename} , server_filename = #{server_filename} , file_size = #{file_size}
		where team_idx = #{team_idx}
    </update>
    
    <delete id="leaveTeam" parameterType="HashMap">
        delete ins_team_member 
		where fk_team_idx = #{team_idx} and team_userid = #{userid}
    </delete>
    
	<resultMap type="HashMap"  id="MyTmemberMap">
        <result property="userid" 				    column="userid" 			      javaType="String" />
 		<result property="pwd" 			            column="pwd" 			          javaType="String" />
 		<result property="name" 		            column="name" 			          javaType="String" />
 		<result property="nickname" 			    column="nickname" 		          javaType="String" />
 		<result property="email" 			        column="email" 		         	  javaType="String" />
 		<result property="tel1" 	                column="tel1" 	                  javaType="String" />
 		<result property="tel2" 				    column="tel2" 			          javaType="String" />
 		<result property="tel3" 			        column="tel3" 			          javaType="String" />
 		<result property="leave_status" 		    column="leave_status" 			  javaType="String" />
 		<result property="job" 			            column="job" 		              javaType="String" />
 		<result property="birthday" 			    column="birthday" 			      javaType="String" />
 		<result property="org_filename" 	        column="org_filename" 	          javaType="String" />
 		<result property="ins_personal_alarm" 	    column="ins_personal_alarm"       javaType="String" />
 		<result property="team_member_admin_status" column="team_member_admin_status" javaType="String" /> 
    </resultMap>
    <select id="searchMyTmember" parameterType="HashMap" resultMap="MyTmemberMap">
		select B.userid, A.team_member_admin_status, B.pwd, B.name, B.nickname, B.email
		     , B.tel1, B.tel2, B.tel3, B.leave_status, B.job, B.birthday, B.org_filename
		     , B.ins_personal_alarm
		from ins_team_member A left join ins_member B
		on A.team_userid = B.userid
		where A.fk_team_idx = #{team_idx} and A.team_member_admin_status != 4 and A.team_member_admin_status != 3 and (lower(B.nickname) like '%' || #{searchMyTmember} || '%'  or lower(B.email) like '%' || #{searchMyTmember} || '%' or lower(B.userid)like '%' || #{searchMyTmember} || '%') 
    </select>
    
    <select id="myTeamMemberList" parameterType="String" resultType="com.spring.finalins.model.TeamMemberVO">
        select fk_team_idx, team_userid, team_member_admin_status
		from ins_team_member
		where fk_team_idx = #{team_idx} and team_member_admin_status = 1
    </select>
    
    <select id="count2Admin" parameterType="String" resultType="Integer"> 
		select count(*)
		from ins_team_member
		where team_member_admin_status = 1 and fk_team_idx = #{team_idx}
    </select>
    
    <select id="totalMemberCount" parameterType="String" resultType="Integer">
        select count(*)
		from ins_team_member
		where fk_team_idx = #{team_idx} and team_member_admin_status != 4 and team_member_admin_status != 3
    </select>
    
    <resultMap type="HashMap"  id="searchExceptMemberMap"> 
 		<result property="nickname" 			    column="nickname" 		          javaType="String" />
 		<result property="email" 			        column="email" 		         	  javaType="String" />  
 		<result property="org_filename" 	        column="org_filename" 	          javaType="String" /> 
 		<result property="userid" 	         	    column="userid" 	              javaType="String" /> 
    </resultMap> 
    <select id="getSearchExceptTeamMember" parameterType="HashMap" resultMap="searchExceptMemberMap">
 		select userid, nickname, email, org_filename
		from ins_member A left join ins_team_member B
        on A.userid = B.team_userid 
		where (lower(A.nickname) like '%' || #{searchWord} || '%'  or lower(A.email) like '%' || #{searchWord}  || '%') and A.leave_status = 0 and userid !=  #{login_userid} and nvl(B.FK_TEAM_IDX,0) != #{team_idx}  
        order by 2  
    </select>
    
    <select id="joinMemberCount" parameterType="String"  resultType="Integer">
        select count(*)
		from ins_team_member
		where fk_team_idx = #{team_idx} and team_member_admin_status = 4
    </select>
    
    <update id="breakTeam" parameterType="String">
      update ins_team set team_delete_status = 0
	  where team_idx = #{team_idx}
    </update>
    
    <select id="projectCnt" parameterType="String" resultType="Integer">
      select count(*)
	  from ins_project A join ins_project_member B
	  on A.project_idx = B.fk_project_idx
	  where B.project_member_userid = #{login_userid} and A.fk_team_idx = #{team_idx}
    </select>
    
    <select id="getProjectList" parameterType="HashMap" resultType="com.spring.finalins.model.ProjectVO">
      select project_idx, fk_team_idx, project_name, project_visibility_st, project_delete_status, fk_project_image_idx
	  from 
		   (
		    select rownum as RNO ,project_idx, fk_team_idx, project_name, project_visibility_st, project_delete_status, fk_project_image_idx
		    from
		       (
		        select project_idx, fk_team_idx, project_name, project_visibility_st, project_delete_status, fk_project_image_idx
		        from ins_project A join ins_project_member B
		        on A.project_idx = B.fk_project_idx
		        where B.project_member_userid = #{login_userid} and A.project_delete_status != 0 and B.project_member_status != 1 and A.fk_team_idx = ${team_idx}
		        order by project_idx desc
		     )V
		   )T
		 where T.RNO between #{startRno} and #{endRno}
    </select>
    
</mapper>
 
 